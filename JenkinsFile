pipeline {
  agent any;
stages {
    stage("GIT") {
      steps {
        sh 'git pull origin master'
      }
    }


    stage("MAVEN BUILD") {
      steps {
        sh 'mvn clean install -Dmaven.test.skip=true'
    }
    }


  /* stage("MOCKITO") {
          steps {
        sh "mvn test -Dtest=com.example.backend.services.BilanAnnuelServiceImpMock"
                    sh "mvn test -Dtest=com.example.backend.services.CandidatureServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.CertificatsServiceImpMock"
                    sh "mvn test -Dtest=com.example.backend.services.CollaborateurServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.CompetenceServiceImpMock"
                    sh "mvn test -Dtest=com.example.backend.services.EntretienRhServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.EntretienServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.EvaluationServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.FormateurServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.FormationServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.GroupServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.ManagerServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.PosteServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.QuestionServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.QuizzServiceImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.SessionFormationImplMock"
                    sh "mvn test -Dtest=com.example.backend.services.UserServiceImplMock"

          }
        }*/

   /* stage("SONARQUBE") {
      steps {
       sh "mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=azerty123"
      }
    }

stage('MVN NEXUS')
                  {
                  steps {

                  sh 'mvn  deploy -DskipTests  '

                  }}*/

 stage("BUILD DOCKER IMAGE") {
            steps {
                script {
                    // Stocker le répertoire actuel
                    env.ORIGINAL_DIR = sh(script: 'pwd', returnStdout: true).trim()

                    // Construire les images Docker
                    sh 'docker build -t khaznaji/stagepfe:latest .'
                    git branch: 'master', url: 'https://github.com/khaznaji/StagePFE_Front.git'


                        sh 'docker build -t khaznaji/stagepfefront:latest -f Dockerfile .'
                    git branch: 'master', url: 'https://github.com/khaznaji/Cv-Matching.git'

                        sh 'docker build -t khaznaji/stagepfefrontpython:latest -f Dockerfile .'


                    // Revenir au répertoire initial
                    sh "cd ${env.ORIGINAL_DIR}"
                }
            }
        }
       stage('docker push'){
                        steps{
                            script{
                                sh 'docker login -u "khaznaji" -p "191JFT2725" docker.io'
                                sh 'docker push khaznaji/stagepfe:latest'
                                sh 'docker push khaznaji/stagepfefront:latest'
                                 sh 'docker push khaznaji/stagepfefrontpython:latest'
                        }
                    }}
  stage('docker compose') {
            steps {
                script {
                    // Afficher le répertoire de travail actuel
                    sh 'pwd'
                    // Afficher le contenu du répertoire courant
                    sh 'ls -l'
                    // Vérifier que le fichier docker-compose.yml est présent
                    sh 'cat docker-compose.yml'
                    // Utiliser docker-compose pour démarrer les services
                    sh 'docker compose up -d'
                }
            }
        }


}}